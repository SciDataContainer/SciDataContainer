Container Types
===============

Three different types of containers are currently supported, which differ mainly in the way in which they are handled by the storage server.

Single-step container
---------------------
The standard container type is the **single-step container**.
It is well suited for the typical work-flow of generating data and save all of it in one shot.
An examplary creation of a single-step container can be found in the :doc:`usage` section.

Multi-step container
--------------------

The second type is a **multi-step container**, which is intended for long running measurements or simulations.
As long as the attribute `complete` in `content.json` has the value `False`, the dataset may be uploaded repeatedly, each time replacing the dataset with the same UUID::

    >>> items["content.json"]["complete"] = False
    >>> dc = Container(items=items)
    >>> dc.upload()
    >>> dc["content.json"]["uuid"]
    '306e2c2d-a9f6-4306-8851-1ee0fceeb852'

The server will only accept containers with increasing modification timestamps.
Since the resolution of the internal timestamps is a second, you must wait at least one second before the next upload::

    >>> dc = Container(uuid="306e2c2d-a9f6-4306-8851-1ee0fceeb852")
    >>> dc["meas/newdata.json"] = newdata
    >>> dc.upload()


For the final upload, the container must be marked as being complete.
This makes this dataset immutable::

    >>> dc = Container(uuid="306e2c2d-a9f6-4306-8851-1ee0fceeb852")
    >>> dc["meas/finaldata.json"] = finaldata
    >>> dc["content.json"]["complete"] = True
    >>> dc.upload()

Static container
----------------

The third container type is a **static container**.
Static containers are intended for static parameters in contrast to measurement or simulation data.
An example would be a detailed description of a measurement setup, which is used for many measurements.
Instead of including the large setup data with each individual measurement dataset, the whole setup may be stored as a single static dataset and referenced by its UUID in the measurement datasets.

A static container is generated by calling the method `freeze()` of the container object::

    >>> dc = Container(items=items)
    >>> dc.freeze()
    >>> dc
    Static Container
        type:     myRandInt
        uuid:     2a7eb1c5-5fe8-4c92-be1d-2f1207b0d855
        hash:     bafc6813d92bd23b06b63eed035ba9b33415acc770c9128f47775ab2d55cc152
        created:  2023-03-01 21:01:20 UTC
        author:   Reinhard Caspary

Freezing a container will set the attribute `static` in `content.json` to `True`, which makes this container immutable and it calculates an SHA256 hash of the container content.
When you try to upload a static container and there is another static container with the same attributes `containerType.name` and `hash`, the content of the current container object is silently replaced by the original one from the server.

